generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ActiveIngredients {
  Id    BigInt  @id @default(autoincrement())
  Name  String  @unique(map: "Name") @db.VarChar(160)
  Drugs Drugs[]
}

model AppointmentNotes {
  Id             BigInt         @id @default(autoincrement())
  AppointmentId  BigInt
  DoctorUserId   BigInt
  Content        String         @db.LongText
  CreatedAt      DateTime       @default(now())
  Appointments   Appointments   @relation(fields: [AppointmentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_An_Appt")
  DoctorProfiles DoctorProfiles @relation(fields: [DoctorUserId], references: [UserId], onDelete: NoAction, onUpdate: NoAction, map: "FK_An_Doctor")

  @@index([DoctorUserId], map: "FK_An_Doctor")
  @@index([AppointmentId], map: "IX_AppointmentNotes_Appt")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Appointments {
  Id                                          BigInt                 @id @default(autoincrement())
  PatientUserId                               BigInt
  DoctorUserId                                BigInt
  SlotId                                      BigInt?
  Status                                      Appointments_Status
  ScheduledAt                                 DateTime?
  DurationMin                                 Int?
  PriceCents                                  Int?
  Currency                                    String?                @db.Char(3)
  Modality                                    Appointments_Modality? @default(online)
  SfuRoomId                                   String?                @db.VarChar(100)
  CreatedByUserId                             BigInt?
  CancelledByUserId                           BigInt?
  CancelReason                                String?                @db.VarChar(255)
  CreatedAt                                   DateTime               @default(now())
  UpdatedAt                                   DateTime               @default(now())
  AppointmentNotes                            AppointmentNotes[]
  Users_Appointments_CancelledByUserIdToUsers Users?                 @relation("Appointments_CancelledByUserIdToUsers", fields: [CancelledByUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Appt_CancelledBy")
  Users_Appointments_CreatedByUserIdToUsers   Users?                 @relation("Appointments_CreatedByUserIdToUsers", fields: [CreatedByUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Appt_Creator")
  DoctorProfiles                              DoctorProfiles         @relation(fields: [DoctorUserId], references: [UserId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Appt_Doctor")
  Users_Appointments_PatientUserIdToUsers     Users                  @relation("Appointments_PatientUserIdToUsers", fields: [PatientUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Appt_Patient")
  AvailabilitySlots                           AvailabilitySlots?     @relation(fields: [SlotId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Appt_Slot")
  Conversations                               Conversations?
  Payments                                    Payments?
  VideoSessions                               VideoSessions?
  MedicalRecords                              MedicalRecords[]

  @@index([CreatedByUserId], map: "FK_Appt_Creator")
  @@index([DoctorUserId, ScheduledAt], map: "IX_Appointments_Doctor_Scheduled")
  @@index([PatientUserId, ScheduledAt], map: "IX_Appointments_Patient_Scheduled")
  @@index([SlotId], map: "IX_Appointments_Slot")
  @@index([CancelledByUserId], map: "IX_Appt_CancelledBy")
}

model AuditLogs {
  Id           BigInt   @id @default(autoincrement())
  ActorUserId  BigInt
  Action       String   @db.VarChar(60)
  ResourceType String   @db.VarChar(60)
  ResourceId   BigInt
  Metadata     Json?
  CreatedAt    DateTime @default(now())
  Users        Users    @relation(fields: [ActorUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Audit_Actor")

  @@index([ActorUserId, CreatedAt], map: "IX_Audit_Actor_Time")
  @@index([ResourceType, ResourceId], map: "IX_Audit_Resource")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model AvailabilitySlots {
  Id             BigInt         @id @default(autoincrement())
  DoctorUserId   BigInt
  StartAt        DateTime
  EndAt          DateTime
  IsRecurring    Boolean        @default(dbgenerated("b'0'")) @db.Bit(1)
  RRule          String?        @db.LongText
  CreatedAt      DateTime       @default(now())
  UpdatedAt      DateTime       @default(now())
  Appointments   Appointments[]
  DoctorProfiles DoctorProfiles @relation(fields: [DoctorUserId], references: [UserId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Availability_Doctor")

  @@index([DoctorUserId, StartAt], map: "IX_Availability_Doctor_Start")
}

model ConsentLogs {
  Id         BigInt           @id @default(autoincrement())
  UserId     BigInt
  Type       ConsentLogs_Type
  Version    String           @db.VarChar(20)
  Language   String           @db.VarChar(10)
  AcceptedAt DateTime         @default(now())
  Ip         String?          @db.VarChar(45)
  UserAgent  String?          @db.VarChar(255)
  Users      Users            @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Consent_User")

  @@index([UserId, Type, AcceptedAt], map: "IX_Consent_User")
}

model ConversationParticipants {
  ConversationId BigInt
  UserId         BigInt
  Conversations  Conversations @relation(fields: [ConversationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CP_Conv")
  Users          Users         @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CP_User")

  @@id([ConversationId, UserId])
  @@index([UserId], map: "IX_CP_User")
}

model Conversations {
  Id                       BigInt                     @id @default(autoincrement())
  AppointmentId            BigInt?                    @unique(map: "UQ_Conv_Appt")
  CreatedBy                BigInt?
  CreatedAt                DateTime                   @default(now())
  ConversationParticipants ConversationParticipants[]
  Appointments             Appointments?              @relation(fields: [AppointmentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Conv_Appt")
  Users                    Users?                     @relation(fields: [CreatedBy], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Conv_Creator")
  Messages                 Messages[]
  TranscriptionSegments    TranscriptionSegments[]

  @@index([AppointmentId], map: "IX_Conversations_Appt")
  @@index([CreatedAt], map: "IX_Conversations_CreatedAt")
  @@index([CreatedBy], map: "IX_Conversations_Creator")
}

model Countries {
  Id              BigInt           @id @default(autoincrement())
  Iso2            String           @unique(map: "Iso2") @db.Char(2)
  Name            String           @db.VarChar(120)
  Currency        String?          @db.Char(3)
  RegulatoryNotes String?          @db.LongText
  CountryDrugs    CountryDrugs[]
  DoctorProfiles  DoctorProfiles[]
  Users           Users[]
}

model CountryDrugs {
  Id         BigInt    @id @default(autoincrement())
  CountryId  BigInt
  DrugId     BigInt
  LocalBrand String?   @db.VarChar(160)
  Otc        Boolean?  @db.Bit(1)
  RxRequired Boolean?  @db.Bit(1)
  Countries  Countries @relation(fields: [CountryId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CD_Country")
  Drugs      Drugs     @relation(fields: [DrugId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CD_Drug")

  @@unique([CountryId, DrugId], map: "UQ_CD")
  @@index([CountryId], map: "IX_CD_Country")
  @@index([DrugId], map: "IX_CD_Drug")
}

model DoctorProfileSpecialties {
  DoctorUserId   BigInt
  SpecialtyId    BigInt
  DoctorProfiles DoctorProfiles @relation(fields: [DoctorUserId], references: [UserId], onDelete: NoAction, onUpdate: NoAction, map: "FK_DPS_Doctor")
  Specialties    Specialties    @relation(fields: [SpecialtyId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DPS_Specialty")

  @@id([DoctorUserId, SpecialtyId])
  @@index([SpecialtyId], map: "IX_DPS_Specialty")
}

model DoctorProfiles {
  UserId                   BigInt                     @id
  LicenseNumber            String                     @db.VarChar(100)
  LicenseCountryId         BigInt
  LicenseValidUntil        DateTime?                  @db.Date
  VerificationStatus       String                     @default("pending") @db.VarChar(20)
  MedicalSchool            String?                    @db.VarChar(160)
  YearsExperience          Int?
  Bio                      String?                    @db.LongText

  // 🆕 Campos de verificación (Fase 4)
  CertificationDocuments   String?                    @db.LongText // JSON array de URLs de documentos
  VerificationNotes        String?                    @db.LongText // Notas del admin sobre la verificación
  VerifiedAt               DateTime?                  // Fecha de verificación
  VerifiedByAdminId        BigInt?                    // ID del admin que verificó
  RejectionReason          String?                    @db.LongText // Razón de rechazo si aplica

  CreatedAt                DateTime                   @default(now())
  UpdatedAt                DateTime                   @default(now())
  AppointmentNotes         AppointmentNotes[]
  Appointments             Appointments[]
  AvailabilitySlots        AvailabilitySlots[]
  DoctorProfileSpecialties DoctorProfileSpecialties[]
  Countries                Countries                  @relation(fields: [LicenseCountryId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DoctorProfiles_Country")
  Users                    Users                      @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DoctorProfiles_User")

  @@index([LicenseCountryId], map: "IX_DP_LicenseCountryId")
  @@index([VerificationStatus], map: "IX_DP_VerificationStatus")
}

model Drugs {
  Id                 BigInt            @id @default(autoincrement())
  BrandName          String            @db.VarChar(160)
  Form               String?           @db.VarChar(40)
  Strength           String?           @db.VarChar(60)
  ActiveIngredientId BigInt
  CountryDrugs       CountryDrugs[]
  ActiveIngredients  ActiveIngredients @relation(fields: [ActiveIngredientId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Drugs_Ingredient")

  @@index([ActiveIngredientId], map: "IX_Drugs_Ingredient")
}

model Files {
  Id          BigInt     @id @default(autoincrement())
  OwnerUserId BigInt?
  StorageUrl  String     @db.VarChar(512)
  MimeType    String?    @db.VarChar(100)
  SizeBytes   BigInt?
  Checksum    String?    @db.VarChar(128)
  CreatedAt   DateTime   @default(now())
  Users       Users?     @relation(fields: [OwnerUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Files_Owner")
  Messages    Messages[]

  @@index([OwnerUserId], map: "IX_Files_Owner")
}

model MessageTranslations {
  Id              BigInt   @id @default(autoincrement())
  MessageId       BigInt
  Language        String   @db.VarChar(10)
  Content         String   @db.LongText
  Engine          String?  @db.VarChar(60)
  Confidence      Decimal? @db.Decimal(5, 3)
  LatencyMs       Int?
  IsAuto          Boolean  @default(dbgenerated("b'1'")) @db.Bit(1)
  GlossaryApplied Boolean  @default(dbgenerated("b'0'")) @db.Bit(1)
  CreatedAt       DateTime @default(now())
  Messages        Messages @relation(fields: [MessageId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_MT_Message")

  @@unique([MessageId, Language], map: "UQ_MT")
}

model Messages {
  Id                  BigInt                @id @default(autoincrement())
  ConversationId      BigInt
  SenderUserId        BigInt
  Type                String                @db.VarChar(20)
  Content             String?               @db.LongText
  Language            String?               @db.VarChar(10)
  CreatedAt           DateTime              @default(now())
  FileId              BigInt?
  ReplyToMessageId    BigInt?
  MessageTranslations MessageTranslations[]
  Users               Users                 @relation(fields: [SenderUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Messages_User")
  Conversations       Conversations         @relation(fields: [ConversationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Msg_Conv")
  Files               Files?                @relation(fields: [FileId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Msg_File")
  Messages            Messages?             @relation("MessagesToMessages", fields: [ReplyToMessageId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Msg_ReplyTo")
  other_Messages      Messages[]            @relation("MessagesToMessages")

  @@index([SenderUserId], map: "FK_Messages_User")
  @@index([ConversationId], map: "IX_Messages_Conv")
  @@index([ConversationId, CreatedAt], map: "IX_Messages_Conv_Created")
  @@index([FileId], map: "IX_Messages_File")
  @@index([ReplyToMessageId], map: "IX_Msg_ReplyTo")
}

model Payments {
  Id            BigInt          @id @default(autoincrement())
  AppointmentId BigInt          @unique(map: "UQ_Pay_Appt")
  AmountCents   Int
  Currency      String          @db.Char(3)
  Provider      String          @db.VarChar(40)
  Status        Payments_Status @default(PENDING)
  ProviderRef   String?         @db.VarChar(128)
  CreatedAt     DateTime        @default(now())
  UpdatedAt     DateTime        @default(now())
  Appointments  Appointments    @relation(fields: [AppointmentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Pay_Appt")
  Refunds       Refunds[]
}

model Refunds {
  Id          BigInt   @id @default(autoincrement())
  PaymentId   BigInt
  AmountCents Int
  Reason      String?  @db.VarChar(255)
  CreatedAt   DateTime @default(now())
  Payments    Payments @relation(fields: [PaymentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Refund_Payment")

  @@index([PaymentId], map: "IX_Refund_Payment")
}

model Specialties {
  Id                       BigInt                     @id @default(autoincrement())
  Name                     String                     @unique(map: "Name") @db.VarChar(120)
  DoctorProfileSpecialties DoctorProfileSpecialties[]
}

model TranscriptionSegments {
  Id             BigInt        @id @default(autoincrement())
  ConversationId BigInt
  UserId         BigInt?
  Language       String        @db.VarChar(10)
  Text           String        @db.LongText
  StartMs        Int
  EndMs          Int
  Engine         String?       @db.VarChar(60)
  Confidence     Decimal?      @db.Decimal(5, 3)
  CreatedAt      DateTime      @default(now())
  Conversations  Conversations @relation(fields: [ConversationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_TS_Conv")
  Users          Users?        @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_TS_User")

  @@index([UserId], map: "FK_TS_User")
  @@index([ConversationId, StartMs], map: "IX_TS_Conv")
}

model UserLanguages {
  UserId      BigInt
  Language    String  @db.VarChar(20)
  Proficiency String? @db.VarChar(20)
  Users       Users   @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserLanguages_User")

  @@id([UserId, Language])
}

model Users {
  Id                                                 BigInt                     @id @default(autoincrement())
  IdentificationTypeId                               BigInt?
  Identification                                     String?                    @unique(map: "UQ_Users_Identification") @db.VarChar(50)
  FirstName                                          String?                    @db.VarChar(80)
  LastName1                                          String?                    @db.VarChar(80)
  LastName2                                          String?                    @db.VarChar(80)
  GenderId                                           BigInt?
  DateOfBirth                                        DateTime?                  @db.Date
  NativeLanguageId                                   BigInt?
  Phone                                              String?                    @db.VarChar(40)
  NationalityId                                      BigInt?
  ResidenceCountryId                                 BigInt?
  Email                                              String                     @unique(map: "Email") @db.VarChar(255)
  IsActive                                           Boolean                    @default(false) @db.Bit(1)
  Role                                               String                     @db.VarChar(20)
  Timezone                                           String?                    @db.VarChar(64)
  CreatedAt                                          DateTime                   @default(now())
  UpdatedAt                                          DateTime                   @default(now())

  // Deprecated fields (mantener por compatibilidad temporal)
  FullName                                           String?                    @db.VarChar(160)
  Gender                                             String?                    @db.VarChar(20)
  PrimaryLanguage                                    String?                    @db.VarChar(10)
  CountryId                                          BigInt?
  Status                                             String?                    @default("active") @db.VarChar(20)

  // Relaciones
  Appointments_Appointments_CancelledByUserIdToUsers Appointments[]             @relation("Appointments_CancelledByUserIdToUsers")
  Appointments_Appointments_CreatedByUserIdToUsers   Appointments[]             @relation("Appointments_CreatedByUserIdToUsers")
  Appointments_Appointments_PatientUserIdToUsers     Appointments[]             @relation("Appointments_PatientUserIdToUsers")
  AuditLogs                                          AuditLogs[]
  ConsentLogs                                        ConsentLogs[]
  ConversationParticipants                           ConversationParticipants[]
  Conversations                                      Conversations[]
  DoctorProfiles                                     DoctorProfiles?
  Files                                              Files[]
  Messages                                           Messages[]
  TranscriptionSegments                              TranscriptionSegments[]
  UserLanguages                                      UserLanguages[]
  Countries                                          Countries?                 @relation(fields: [CountryId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_Country")
  IdentificationType                                 IdentificationTypes?       @relation(fields: [IdentificationTypeId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_IdentificationType")
  GenderRelation                                     Genders?                   @relation(fields: [GenderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_Gender")
  NativeLanguage                                     NativeLanguages?           @relation(fields: [NativeLanguageId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_NativeLanguage")
  Nationality                                        Nationalities?             @relation(fields: [NationalityId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_Nationality")
  ResidenceCountry                                   ResidenceCountries?        @relation(fields: [ResidenceCountryId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_ResidenceCountry")
  UsersAuth                                          UsersAuth?
  VideoSessionParticipants                           VideoSessionParticipants[]

  // 🆕 Nuevas relaciones (Fase 1)
  MedicalRecords_Patient                             MedicalRecords[]           @relation("MedicalRecords_Patient")
  MedicalRecords_Doctor                              MedicalRecords[]           @relation("MedicalRecords_Doctor")
  Subscription                                       Subscriptions?
  MfaSettings                                        UsersMfa?
  DataAccessLogs                                     DataAccessLogs[]

  @@index([CountryId], map: "IX_Users_CountryId")
  @@index([IdentificationTypeId], map: "IX_Users_IdentificationTypeId")
  @@index([GenderId], map: "IX_Users_GenderId")
  @@index([NativeLanguageId], map: "IX_Users_NativeLanguageId")
  @@index([NationalityId], map: "IX_Users_NationalityId")
  @@index([ResidenceCountryId], map: "IX_Users_ResidenceCountryId")
}

model VideoSessionParticipants {
  VideoSessionId BigInt
  UserId         BigInt
  Role           VideoSessionParticipants_Role
  JoinAt         DateTime?
  LeaveAt        DateTime?
  Users          Users                         @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_VSP_User")
  VideoSessions  VideoSessions                 @relation(fields: [VideoSessionId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_VSP_VS")

  @@id([VideoSessionId, UserId])
  @@index([UserId], map: "IX_VSP_User")
}

model VideoSessions {
  Id                       BigInt                     @id @default(autoincrement())
  AppointmentId            BigInt                     @unique(map: "UQ_VS_Appt")
  Provider                 String                     @db.VarChar(40)
  RoomId                   String                     @db.VarChar(128)
  AccessStartAt            DateTime?
  AccessEndAt              DateTime?
  RecordingUrl             String?                    @db.VarChar(512)
  CreatedAt                DateTime                   @default(now())
  VideoSessionParticipants VideoSessionParticipants[]
  Appointments             Appointments               @relation(fields: [AppointmentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_VS_Appt")
}

model UsersAuth {
  UserId                BigInt    @id
  PasswordHash          String    @db.VarChar(120)
  CreatedAt             DateTime  @default(now())
  EmailVerificationToken String?   @db.VarChar(255)
  EmailVerifiedAt       DateTime?
  PasswordResetToken    String?   @db.VarChar(255)
  PasswordResetExpiry   DateTime?

  // 🆕 Campos de gestión (Fase 5)
  IsBanned              Boolean   @default(false) @db.Bit(1)
  BanReason             String?   @db.LongText
  LastLogin             DateTime?

  Users                 Users     @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_UsersAuth_User")
}

model IdentificationTypes {
  Id    BigInt @id @default(autoincrement())
  Code  String @unique @db.VarChar(20)
  Name  String @db.VarChar(100)
  Users Users[]
}

model Genders {
  Id    BigInt @id @default(autoincrement())
  Code  String @unique @db.VarChar(20)
  Name  String @db.VarChar(50)
  Users Users[]
}

model NativeLanguages {
  Id    BigInt @id @default(autoincrement())
  Code  String @unique @db.VarChar(10)
  Name  String @db.VarChar(100)
  Users Users[]
}

model Nationalities {
  Id    BigInt @id @default(autoincrement())
  Code  String @unique @db.VarChar(10)
  Name  String @db.VarChar(100)
  Users Users[]
}

model ResidenceCountries {
  Id    BigInt @id @default(autoincrement())
  Code  String @unique @db.VarChar(10)
  Name  String @db.VarChar(100)
  Users Users[]
}

// 🆕 NUEVAS TABLAS PARA FASE 1

// Tabla de Historiales Médicos (con cifrado)
model MedicalRecords {
  Id                 BigInt        @id @default(autoincrement())
  PatientUserId      BigInt
  DoctorUserId       BigInt
  AppointmentId      BigInt?
  DiagnosisEnc       String        @db.LongText
  PrescriptionsEnc   String?       @db.LongText
  RecommendationsEnc String?       @db.LongText
  FilesJson          Json?
  EncryptionIV       String        @db.VarChar(32)
  CreatedAt          DateTime      @default(now())
  UpdatedAt          DateTime      @default(now())

  Patient            Users         @relation("MedicalRecords_Patient", fields: [PatientUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_MR_Patient")
  Doctor             Users         @relation("MedicalRecords_Doctor", fields: [DoctorUserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_MR_Doctor")
  Appointment        Appointments? @relation(fields: [AppointmentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_MR_Appointment")

  @@index([PatientUserId], map: "IX_MR_Patient")
  @@index([DoctorUserId], map: "IX_MR_Doctor")
  @@index([AppointmentId], map: "IX_MR_Appointment")
}

// Tabla de Planes de Suscripción
model Plans {
  Id              BigInt          @id @default(autoincrement())
  Name            String          @unique @db.VarChar(100)
  PriceCents      Int
  Currency        String          @default("USD") @db.Char(3)
  FeaturesJson    Json
  MaxAppointments Int?
  IsActive        Boolean         @default(true) @db.Bit(1)
  CreatedAt       DateTime        @default(now())

  Subscriptions   Subscriptions[]
}

// Tabla de Suscripciones de Usuarios
model Subscriptions {
  Id         BigInt   @id @default(autoincrement())
  UserId     BigInt   @unique
  PlanId     BigInt
  StartAt    DateTime @default(now())
  ExpiresAt  DateTime?
  IsActive   Boolean  @default(true) @db.Bit(1)
  AutoRenew  Boolean  @default(false) @db.Bit(1)
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @default(now())

  User       Users    @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Sub_User")
  Plan       Plans    @relation(fields: [PlanId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Sub_Plan")

  @@index([UserId], map: "IX_Sub_User")
  @@index([PlanId], map: "IX_Sub_Plan")
}

// Tabla de MFA (Autenticación Multi-Factor)
model UsersMfa {
  UserId      BigInt    @id
  Secret      String    @db.VarChar(255)
  IsEnabled   Boolean   @default(false) @db.Bit(1)
  BackupCodes Json?
  EnabledAt   DateTime?

  User        Users     @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_UsersMfa_User")
}

// Tabla de Logs de Acceso a Datos (Auditoría HIPAA/GDPR)
model DataAccessLogs {
  Id           BigInt   @id @default(autoincrement())
  UserId       BigInt
  ResourceType String   @db.VarChar(60)
  ResourceId   BigInt
  Action       String   @db.VarChar(40)
  IpAddress    String?  @db.VarChar(45)
  UserAgent    String?  @db.VarChar(255)
  CreatedAt    DateTime @default(now())

  User         Users    @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DAL_User")

  @@index([UserId, CreatedAt], map: "IX_DAL_User_Time")
  @@index([ResourceType, ResourceId], map: "IX_DAL_Resource")
}

enum ConsentLogs_Type {
  privacy
  telemedicine
  recording
}

enum VideoSessionParticipants_Role {
  doctor
  patient
  admin
}

enum Appointments_Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
  NO_SHOW
}

enum Payments_Status {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Appointments_Modality {
  online
  in_person
  hybrid
}
